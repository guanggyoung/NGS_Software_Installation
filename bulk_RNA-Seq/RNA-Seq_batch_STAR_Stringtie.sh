#!/bin/bash

##************************  Description of this script  ****************************##
## This script is used to analyze RNA-Seq data generated by Illumina 
## machine in single-end or paired-end mode.
##
## This script start from fastq.gz files and produces gene expression table in the end.
##
## This script merge 4 parts together
## (1) Use FastQC+MultiQC to check fastq data quality;
##     Use Trimmomatic to trim out low quality bases from fastq.
## (2) Use RNA-STAR to align trimmed fastq files to referrence genome.
## (3) Use StringTie (together with gene annotation .gtf file), extract 
##     gene expression table from aligned .bam files. 
## (4) Run prepDE.py script from StringTie website to extract gene count matrix
##     including all samples. This count matrix will be used by DESeq2 in R script
##     for differential gene expression analysis as well as other analysis.
## While the 4 parts are merged together, the global variables for top_level_folder 
## and sample_folders will be re-defined in each part. This re-definition
## is not necessary for the execution of this merged script but will make each part
## still a complete script and thus can be copied out for single part running and test.
##*********************************************************************************##

##************ What to do after finish running this script? ***********************##
## Typical downstream operation would be using R and Bioconductor to do personalized
## analysis specific to the experimental design which produced the RNA-Seq data.
##*********************************************************************************##

## ********** Requirement for the organization of RNA-Seq fastq files:  ************##
## Create a folder to store all the files. This folder will be called “top_level folder”
## and can have any filename. But the filename should contain only letters,numbers or
## underline, should NOT contain space.
##
## Within the top_level folder, for each sample(sequencing library), create a folder 
## with the name of that sample.
## Within this sample folder, put the single-end read(or the two paired-end reads for
## same library) in fastq.gz format.
## The names of samples must be clear and short so that it is easier to distinguish
## different samples. Also the sample_folder names should contain only letters, 
## numbers or underline, should NOT contain space.
##
## The names of the sample folder will be used in following scripts to name all the 
## output files or folders during data analysis.
## So, provide short and clear names for sample folders. And the sample name can only
## contain letters, numbers and/or underlines, special characters are not allowed.
## Good sample names can be: S1,S2; or Sample1, Sample2; or Ctrl1, Ctrl2; 
## Or Ctrl_S1, Ctrl_S2 ...
##
## Within the top_level folder, create a txt file to explain the meaning of different
## sample names. For example, figure out how the samples should be grouped(e.g. sample
## S1, S2, S3 are control, sample S4, S5, S6 are KO). 
##
## In summary, there should be one top_level folder to store all sample folders and one
## txt file to explain the meaning of sample names and how the experiment is designed.
##
## The txt file will be used for DESeq2 and/or other personalized analysis scripts, it 
## will not be used during the alignment and expression table generation process.
## The alignment and expression table generation processes use only the fastq.gz files
## within sample folders.
##
## A program installation script for all programs needed will also be provided later.
##*********************************************************************************##

## ******************** Name and storage of this script. ***************************##
## This script will be named: RNA-Seq_batch_STAR_StringTie.sh 
## This script will be stored in the top_level folder.
## This script will be executed with: bash RNA-Seq_batch_STAR_StringTie.sh
##**********************************************************************************##

## ********** Requirement of software installation ****************************##
## All the programs used in this script must locate in /home/guang/bio_softwares/ folder ##
## All the path of the programs must already write in ~/.bashrc file so that they
## can be called from anywhere(outside the installation folder).
## The programs installed are(check with "ls -al" command :
## yang@PC1:~$ ls -al ./bio_softwares
## total 29496
## drwxrwxrwx 1 yang yang     4096 Apr 18 13:33 .
## drwxr-xr-x 1 yang yang     4096 Apr 19 13:14 ..
## drwxrwxrwx 1 yang yang     4096 Apr 12 15:30 FastQC
## -rw-rw-rw- 1 yang yang 15500790 Mar 25 17:01 picard.jar
## drwxrwxrwx 1 yang yang     4096 Apr 15 12:17 RNA-STAR_v2.7.0f
## drwxrwxr-x 1 yang yang     4096 Apr 16 13:03 samtools-1.9
## drwxrwxr-x 1 yang yang     4096 Nov  2 14:22 stringtie-1.3.5.Linux_x86_64
## drwxr-xr-x 1 yang yang     4096 Apr  8 11:26 Trimmomatic-0.39

## MultiQC is installed using conda under NGS_Py2.7 environment
## NOTE: NGS_Py2.7 contains several sequence analysis tools.
##       Some of them could run in both Python 2.7 and Python 3.7 environment
##       while some only work in Python 2.7. So here use Python 2.7 to make 
##       sure all of them could work and no need to create multiple enviroments.
##
## This conda "NGS_Py2.7" can be created by following scripts:
##
## $ conda config --add channels conda-forge
## $ conda config --add channels defaults
## $ conda config --add channels r
## $ conda config --add channels bioconda
## #Create a new environment  named NGS_analysis 
## $ conda create --name NGS_Py2.7 python=2.7
## # and install "multiqc" package in this("NGS_Py2.7") environment
## $ conda install --name NGS_Py2.7 multiqc 
## #Activate the environment ‘NGS_Py2.7’
## $ source activate NGS_Py2.7 
## #To deactivate an active environment, use: source deactivate
## ***********************************************************************************##


## *********** Definition of several parameters used by all scripts below ********##
## NOTE: 
##      Refine these parameters each time before running the code.
##      The parameter here are set as the current situation. 
##      They may be modified if system changed(Most of the time: different folders used).
##
# Folder contains all folders of samples
# Use full path.
top_level_folder="/data/guang/Guang_bulkRNASeq"

######### Parameters related to Trimmomatic ##########
# How to run Trimmomatic (inlcude path of Trimmomatic)
execute_Trimmomatic="java -jar /home/guang/bio_softwares/Trimmomatic-0.39/trimmomatic-0.39.jar"
# Paired-end Trimmomatic adapter file
PE_Trimmomatic_adapter="/home/guang/bio_softwares/Trimmomatic-0.39/adapters/TruSeq3-PE.fa"
# Single-end Trimmomatic adapter file
SE_Trimmomatic_adapter="/home/guang/bio_softwares/Trimmomatic-0.39/adapters/TruSeq3-SE.fa"
######################################################

######### Parameters related to STAR ###############
genome_STAR_index_Dir="/data/guang/genome_index/RNA-STAR/RNA_STAR_overhang100/Mus_musculus.GRCm38.97"
####################################################

######### Parameter for StringTie #############
gtf_annotation="/data/guang/Reference_Genome/mouse_genome/Mus_musculus.GRCm38.97.gtf"
###############################################
##******************* Parameter Definition Finished Here *********************##

##*************** The actual alignment script starts here. ********************##
################################################################################

## Global variables used by all script pieces.
## The global variables will be re-defined in each part. Although this re-definition
## is not necessary for execution of this merged script, re-definition of these
## global variables will make each part still a complete script and can be copied
## out to run independently.
## Re-define of the global variables to make  this part independent.
## top_level_folder="/data/guang/Guang_bulkRNASeq"
## Initialize the top_level folder. Must use full path!!
## This folder should contain the sample folders with single-end fatq.gz files.
## This folder will be used by all script pieces below.
cd $top_level_folder
sample_folder_names="$(ls -l | grep "^d" | awk '{print $NF}')"
## Get names of sample folders:
## The command on the right site will first use 'ls -l' to check all files and folders
## then 'grep "^d" ' will select the ones will a 'd' property at the beginning of 
## 'ls -l' command which are folders
## finally 'awk '{print $NF}' will print out the last column of 'ls -l' which are 
## the actual folder names. 
## NOTE: There should be no space in the folder names. If space exists in folder names
##       only the last word of folder name will be print out. This is not what we want!
## sample_folder_names will be used by all script pieces below.

################## Part 1 Quality Control and fastq data trimming.#####################
############# Part 1.1 Check fastq data quality using FastQC ##########################

## Re-define of the global variables to make Part1.1 independent script.
## top_level_folder="/data/guang/Guang_bulkRNASeq"
## Initialize the top_level folder. Must use full path!!
## This folder should contain the sample folders with fatq.gz files of each library.
cd $top_level_folder
sample_folder_names="$(ls -l | grep "^d" | awk '{print $NF}')"
## Get names of sample folders
## The command on the right site will first use 'ls -l' to check all files and folders
## then 'grep "^d" ' will select the ones will a 'd' property at the beginning of 
## 'ls -l' command which are folders
## finally 'awk '{print $NF}' will print out the last column of 'ls -l' which are 
## the actual folder names. 
## NOTE: There should be no space in the folder names. If space exists in folder names
##       only the last word of folder name will be print out. This is not what we want!

for sample_folder in $sample_folder_names
do
	cd $top_level_folder/$sample_folder
	# Get into the sample_folder with fastq.gz file(s)
	mkdir -p $top_level_folder/$sample_folder/$sample_folder\_fastqc_results
	# Make a new folder in sample_folder to store FastQC result; Full path used here.
	fastqc -t 4 *.fastq.gz -O ./$sample_folder\_fastqc_results/
	# -t 4 : Use 4 threads
	# -O ('O' as in 'Open') : specify output folder
	# relative path is used. The full path is 
	# $top_level_folder/$sample_folder/$sample_folder\_fastqc_results
	# Two files generate after calling fastqc: 
	#                (fastq.gz filename)_fastqc.html and (fastq.gz filename)_fastqc.zip
done

################# Part 1.2 Merge FastQC results using MultiQC #######################
##************************** Description of Prat 1.2 ******************************##
## In this part, MultiQC will be called. The fastqc.zip file will be used as its input
## and produce merged quality checking file.
## The merged result will be put in one folder and zipped with the name
## 'merged_fastqc_results_using_multiqc.tar.gz' this merged .tar.gz file will be 
## stored under top_folder_folder directory.
##################################################################################### 


## Re-define of the global variables to make Part1.2 independent script.
## top_level_folder="/data/guang/Guang_bulkRNASeq"
## Initialize the top_level folder. Must use full path!!
## This folder should contain the sample folders with single-end fatq.gz files.
cd $top_level_folder

mkdir -p $top_level_folder/merged_fastqc_results_using_multiqc
# A folder for the merged fastqc data(after calling of multiqc)

conda activate NGS_Py2.7
# Activate the 'NGS_Py2.7' environment which installed MultiQC program.

multiqc $top_level_folder/*/*fastqc_results/*fastqc.zip
# The regular expression after 'multiqc' will check all sample_folders
# Then from a sample_folder, get into its fastqc_results folder
# Finally get the fastqc.zip file inside this folder

# after this operation a folder named 'multiqc_data' 
#                   and a html file named 'multiqc_report.html'
# will be created.
# Next step will put them into a folder and zip the folder, remove the original folder
conda deactivate

cd $top_level_folder
mv multiqc_data $top_level_folder/merged_fastqc_results_using_multiqc
mv multiqc_report.html $top_level_folder/merged_fastqc_results_using_multiqc
# Move the outputs of multiqc into the merged_fastqc_results_using_multiqc folder
tar czvf merged_fastqc_results_using_multiqc.tar.gz merged_fastqc_results_using_multiqc
# zip the merged_fastqc_results_using_multiqc. 
# The zipped multiqc result is stored in $top_level_folder
rm -r $top_level_folder/merged_fastqc_results_using_multiqc

# remove the merged_fastqc_results_using_multiqc since it is zipped.


################ Part 1.3 Trim fastq.gz files using Trimmomatic ###############
##********************** Description of Part 1.3 ****************************##
## In this part, Trimmomatic will be called to trim out adapters and low quality
## end bases of fastq reads.
##
## This part deal with two possibilities: single-end reads or paired-end reads
## so before doing any real job, the number of fastq files will be checked,
## If there is only one .fastq.gz file, that means it is single-end read
## If there is two .fastq.gz files, that means it comes from paired-end experiment
##
## For single-end read, Trimmomatic will be called using SE mode,
## For paired-end read, Trimmomatic will be called using PE mode.
###############################################################################

## Re-define of the global variables to make Part1.3 independent script.
## top_level_folder="/data/guang/Guang_bulkRNASeq"
## Initialize the top_level folder. Must use full path!!
## This folder should contain the sample folders with single-end fatq.gz files.
cd $top_level_folder
sample_folder_names="$(ls -l | grep "^d" | awk '{print $NF}')"
## Get names of sample folders
## The command on the right site will first use 'ls -l' to check all files and folders
## then 'grep "^d" ' will select the ones will a 'd' property at the beginning of 
## 'ls -l' command which are folders
## finally 'awk '{print $NF}' will print out the last column of 'ls -l' which are 
## the actual folder names. 
## NOTE: There should be no space in the folder names. If space exists in folder names
##       only the last word of folder name will be print out. This is not what we want!

for sample_folder in $sample_folder_names
do
	cd $top_level_folder/$sample_folder
	# Get into the sample_folder with fastq.gz file
	mkdir -p $top_level_folder/$sample_folder/$sample_folder\_Trimmomatic_trimmed
	# Make a new folder in sample_folder to store trimmed result; Full path used here.
	fastq_gz_files="$(ls *.fastq.gz)"
	# Get all fastq.gz files in this folder
	num_fastq="$(echo "$fastq_gz_files" | wc -l)"
	# Total number of fastq.gz files
	if [ $num_fastq -eq 2 ]
	# Two fastq.gz files exist, paired-end results!!
	# Use PE for trimmomatic
	#
	# Note the stupid spaces for 'if' clause:
	# one space after 'if' key word
	# one space after '['
	# one space before ']'
	# one space before '-eq'
	# one space after '-eq'
	# All thhe spaces must be provided, for example, if no space before ']'
	# '2]' will be considered as one variable not a '2' and a ']'
	then
	# Do paired-end trimming using Trimmomatic
	# java -jar /home/guang/bio_softwares/Trimmomatic-0.39/trimmomatic-0.39.jar PE -phred33 \
	$execute_Trimmomatic PE -phred33 \
	$fastq_gz_files \
	./$sample_folder\_Trimmomatic_trimmed/trimmed.$sample_folder\_paired.R1.fastq.gz \
	./$sample_folder\_Trimmomatic_trimmed/trimmed.$sample_folder\_unpaired.R1.fastq.gz \
	./$sample_folder\_Trimmomatic_trimmed/trimmed.$sample_folder\_paired.R2.fastq.gz \
	./$sample_folder\_Trimmomatic_trimmed/trimmed.$sample_folder\_unpaired.R2.fastq.gz \
	ILLUMINACLIP:$PE_Trimmomatic_adapter:2:30:10 LEADING:3 \
	TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36
	#Note: 'ILLUMINACLIP:/home/guang/bio_softwares/Trimmomatic-0.39/adapters/TruSeq3-PE.fa' is used
	#      This is default set since newer experiments use TruSeq3 kits.
	elif [ $num_fastq -eq 1 ]
	# One fastq.gz file exist, single-end experiment.
	then
	# Do single-end trimming using Trimmomatic
	# java -jar /home/guang/bio_softwares/Trimmomatic-0.39/trimmomatic-0.39.jar SE -phred33 \
	$execute_Trimmomatic SE -phred33 \
	$fastq_gz_files \
	./$sample_folder\_Trimmomatic_trimmed/trimmed.$sample_folder\_reads.fastq.gz \
	ILLUMINACLIP:$SE_Trimmomatic_adapter:2:30:10 LEADING:3 \
	TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36
	#Note: 'ILLUMINACLIP:/home/guang/bio_softwares/Trimmomatic-0.39/adapters/TruSeq3-PE.fa' is used
	#      This is default set since newer experiments use TruSeq3 kits.
	else
	echo "More than 2 original fastq.gz files exist for $sample_folder"
	echo "This is not legal, exit processing of this sample(continue to next sample)"
	continue
	fi
done
################# Part 1 Quality control and trimming finished ################################


########## Part 2 Align trimmed fastq.gz files to reference genome using RNA-STAR ############

##************************** Description of Part2 ******************************************##
## In this part, the trimmed fastq.gz files will be used as input to RNA-STAR program
## and RNA-STAR will produce aligned .bam file for each sample.
## Before do the actual alignment, the number of fastq.gz files will be checked first.

## If trimmed fastq.gz files were from paired-end fastq.gz files, four .fastq.gz files will
## be produced: paired_R1.fastq.gz, paired_R2.fastq.gz(the 2 paired-end files) 
##              and unpaired_R1.fastq.gz, unpaired_R2.fatq.gz
##             (the 2 unpaired read files trimmed out by Trimmomatic)
## In this case, RNA-STAR will first use the 2 paired-end fatq.gz files as input and produce one
## big .bam file;
## Then, RNA-STAR will be called 2 more times to align the two trimmed-out unpaired .fastq.gz 
##       files and produce two small .bam files.
## Finally, samtools program will be called to merge the 3 .bam files and sort the merged larger 
##          bam file by coordinate. 
##          This merged and sorted larger .bam file is the final file will be used for StringTie.
##          After getting this final .bam files, all other .bam files will be deleted by calling
##          system 'rm' command to save hard drive space.

## If the original data came from single-end Illumina read. There will be only one original
## fastq.gz file and only one trimmed fastq.gz file.
## In this case, RNA-STAR will be called to align this single trimmed fastq.gz file to reference
## genome and will produce one .bam file for downstream analysis. 
################################################################################################

##**************** Software installation and pre-processing  Requirement *********************## 
##             (1) RNA-STAR is installed and its installation path is in system $PATH
##                 thus can be called anywhere.
##             (2) Index of referrence genome is already generated and stored at 
##                 /home/guang/human_genome_index/RNA_STAR_overhang100 folder
###############################################################################################



## Re-define of the global variables to make Part2.1 independent script.
## top_level_folder="/data/guang/Guang_bulkRNASeq"
## Initialize the top_level folder. Must use full path!!
## This folder should contain the sample folders with single-end fatq.gz files.
cd $top_level_folder
sample_folder_names="$(ls -l | grep "^d" | awk '{print $NF}')"
## Get names of sample folders
## The command on the right site will first use 'ls -l' to check all files and folders
## then 'grep "^d" ' will select the ones will a 'd' property at the beginning of 
## 'ls -l' command which are folders
## finally 'awk '{print $NF}' will print out the last column of 'ls -l' which are 
## the actual folder names. 
## NOTE: There should be no space in the folder names. If space exists in folder names
##       only the last word of folder name will be print out. This is not what we want!

for sample_folder in $sample_folder_names
do
	cd $top_level_folder/$sample_folder
	#get into sample_folder
	mkdir -p $top_level_folder/$sample_folder/$sample_folder\_RNA_STAR_Results
	
	trimmed_fastq_gz_files="$(ls -d $PWD/$sample_folder\_Trimmomatic\_trimmed/*.fastq.gz)"
	#$PWD is current path
	#This command get the full path of trimmed fast.gz files
	
	num_trimmed_fastq="$(echo "$trimmed_fastq_gz_files" | wc -l)"
	if [ $num_trimmed_fastq -ge 2 ] 
	# Check numer of trimmed fastq.gz files. If great than or equals to 2, they must come from 
	# paired-end read files.
	# Treat as trimmed fastq files from paired-end fastq files
	then
	paired_trimmed_reads="$(ls -d $PWD/$sample_folder\_Trimmomatic_trimmed/*_paired.*)"
	# use paired_reads to store the filenames of the 2 paired-end read files
	unpaired_trimmed_reads="$(ls -d $PWD/$sample_folder\_Trimmomatic_trimmed/*_unpaired.*)"
	# use unpaired_reads to store the filenames of the 2 unpaired read files trimmed out by trimmomatic
	
	STAR --runThreadN 6 \
    --genomeDir $genome_STAR_index_Dir \
    --readFilesCommand zcat \
    --outSAMstrandField intronMotif \
    --outSAMtype BAM SortedByCoordinate \
    --readFilesIn $paired_trimmed_reads \
    --outReadsUnmapped Fastx \
    --outFileNamePrefix ./$sample_folder\_RNA_STAR_Results/STAR_alignment\_$sample_folder\_paired_

	# Then align the two unpaired read files trimmed out by Trimmomatic
    for unpaired_one_end_read in $unpaired_trimmed_reads
	
    do
		real_unpaired_fastq_name="$(basename $unpaired_one_end_read)"
        STAR --runThreadN 6 \
        --genomeDir $genome_STAR_index_Dir \
        --readFilesCommand zcat \
        --outSAMstrandField intronMotif \
        --outSAMtype BAM SortedByCoordinate \
        --readFilesIn $unpaired_one_end_read \
        --outReadsUnmapped Fastx \
        --outFileNamePrefix ./$sample_folder\_RNA_STAR_Results/STAR_alignment\_$real_unpaired_fastq_name\_
    done

	# Merge the 3 bam files and sort it
	cd $top_level_folder/$sample_folder/$sample_folder\_RNA_STAR_Results
	bam_files="$(ls *.bam)"
	# get all the 3 bam files created by RNA-STAR
	samtools merge $sample_folder\_merged_paired.and.unpaired.bam $bam_files
	# merge all the 3 bam files together with samtools merge
	samtools sort -@ 6 -m 4G -o $sample_folder\_output.sorted.bam \
                     $sample_folder\_merged_paired.and.unpaired.bam
	# sort the big merged bam file by coordinate with samtools sort(6 threads, 4G RAM for each thread)
	samtools index $sample_folder\_output.sorted.bam
	# index the big merged and sorted bam file
	rm $sample_folder\_merged_paired.and.unpaired.bam
	rm $bam_files
	# remove previous generated bam files before sorting the merged bam.
	
	elif [ $num_trimmed_fastq -eq 1 ]
	# Trimmed fastq.gz file from single-end reads
	then
	trimmed_reads="$(ls -d $PWD/$sample_folder\_Trimmomatic_trimmed/*.fastq.gz)"
	# Get the only single-end trimmed fastq.gz file
	STAR --runThreadN 6 \
    --genomeDir $genome_STAR_index_Dir \
    --readFilesCommand zcat \
    --outSAMstrandField intronMotif \
    --outSAMtype BAM SortedByCoordinate \
    --readFilesIn $trimmed_reads \
    --outReadsUnmapped Fastx \
    --outFileNamePrefix ./$sample_folder\_RNA_STAR_Results/$sample_folder\_output.sorted.bam
	
	cd $top_level_folder/$sample_folder/$sample_folder\_RNA_STAR_Results
	mv *.bam $sample_folder\_output.sorted.bam
	# Change long name of outputed bam of RNA-STAR into a shorter one
	samtools index $sample_folder\_output.sorted.bam
	
	fi
done
##****************************Part2 Finished here *******************************##
## All code above tested OK for single-end reads 20190423 
## with 
## top_level_folder="/data/guang/Guang_bulkRNASeq"
## This file contain the first 10k reads of each fastq.gz file.


## Part3 Use StringTie to generate gene expression table based on aligned .bam and .gtf annotation  ##
##********************************** Description of Part3 ******************************************##
## In this part, StringTie will be called to use the aligned .bam file and .gtf gene annotaion file
## to get expression of each genes for each sampl3
##**************************************************************************************************##

##******************** Requirement of software alignment and pre-processing ************************##
## String Tie should be pre-installed in /home/guang/bio_softwares and its installation directory should
## be in system $PATH and thus StringTie could be called from anywhere
## The gtf annotation file is downloaded from the same website(to make sure their chromosome notation
## are the same. 
## The gtf annotation file should be in /home/guang/mouse_genome/ folder
##
## For one sample, should have only one aligned bam file, this file should be stored and named as 
## $top_level_folder/$sample_folder/$sample_folder\_RNA_STAR_Results/$sample_folder\_output.sorted.bam
##*************************************************************************************************##

##******** Part 3.1 Using StringTie to get gen expression table from .bam and .gtf files **********##

## Re-define of the global variables to make Part3.1 independent script.
## top_level_folder="/data/guang/Guang_bulkRNASeq"
## Initialize the top_level folder. Must use full path!!
## This folder should contain the sample folders with single-end fatq.gz files.
cd $top_level_folder
sample_folder_names="$(ls -l | grep "^d" | awk '{print $NF}')"
## Get names of sample folders
## The command on the right site will first use 'ls -l' to check all files and folders
## then 'grep "^d" ' will select the ones will a 'd' property at the beginning of 
## 'ls -l' command which are folders
## finally 'awk '{print $NF}' will print out the last column of 'ls -l' which are 
## the actual folder names. 
## NOTE: There should be no space in the folder names. If space exists in folder names
##       only the last word of folder name will be print out. This is not what we want!

for sample_folder in $sample_folder_names
do
	cd $top_level_folder/$sample_folder
	#get into sample_folder
	mkdir -p $top_level_folder/$sample_folder/$sample_folder\_StringTie_Results
	
	# stringtie -p 6 -G /home/guang/human_genome/Homo_sapiens.GRCh38.96.gtf \
	stringtie -p 6 -G $gtf_annotation \
    -B -e -o ./$sample_folder\_StringTie_Results/$sample_folder\_transcripts\_WITHeOption.gtf \
    -A ./$sample_folder\_StringTie_Results/$sample_folder\_gene_abundances.tsv \
    ./$sample_folder\_RNA_STAR_Results/*.bam
    # The last parameter is the only aligned .bam file
done


##************** Part3.2 Get gene counts(for DESeq2 analysis) for each sample ***************##
##***************************** Description of Part3.2 **************************************##
## In this part, the 'prepDE.py' script is used to generate the gene count matrix for all
## samples in $sample_folder.
##
## The gene count matrix will be stored in /$top_level_folder/prepDE_gene_count_matrix      
## folder.
##******************************************************************************************##

## Re-define of the global variables to make Part3.2 independent script.
## top_level_folder="/data/guang/Guang_bulkRNASeq"
## Initialize the top_level folder. Must use full path!!
## This folder should contain the sample folders with single-end fatq.gz files.
cd $top_level_folder
sample_folder_names="$(ls -l | grep "^d" | awk '{print $NF}')"
## Get (only) the folder names of all samples
mkdir -p $top_level_folder/prepDE_gene_count_matrix
# Get sample folder name which is also the sample names
for sample_folder in $sample_folder_names
do
	cd $top_level_folder
	gtf_directory="$(ls -d $PWD/$sample_folder/$sample_folder\_StringTie_Results/*.gtf)"
	# Get the full path of the gtf file which will be used to write into sample_list.txt
	echo "$sample_folder $gtf_directory" >> $top_level_folder/prepDE_gene_count_matrix/sample_list.txt
	# Write 'sample_name sample_gtf_location' into sample_list.txt
done
cd $top_level_folder/prepDE_gene_count_matrix
cd $top_level_folder/prepDE_gene_count_matrix
# wget http://ccb.jhu.edu/software/stringtie/dl/prepDE.py
# prepDE.py already exists in stringtie-2.0.4 folder
python2 ~/bio_softwares/stringtie-2.0.4.Linux_x86_64/prepDE.py -i sample_list.txt
## Call prepDE.py using python2. MUST use python2 !!!

## Part3 Extract gene expression level from .bam file(using .gtf annotation) finished here ##

